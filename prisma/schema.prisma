generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    clients       Client[]
    accessTokens  AccessToken[]
    authCodes     AuthCode[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

model Client {
    id           String        @id @default(cuid())
    clientId     String        @unique @default(cuid())
    clientSecret String
    name         String
    redirectUris String[]
    userId       String?
    user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessTokens AccessToken[]
    authCodes    AuthCode[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AccessToken {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    clientId  String
    client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model AuthCode {
    id                  String   @id @default(cuid())
    code                String   @unique
    expiresAt           DateTime
    clientId            String
    client              Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
    userId              String
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    redirectUri         String
    codeChallenge       String?
    codeChallengeMethod String?

    createdAt DateTime @default(now())
}
